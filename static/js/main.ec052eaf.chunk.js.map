{"version":3,"sources":["Components/Converter.jsx","App.js","serviceWorker.js","index.js"],"names":["Converter","useState","currencies","inputValue","from_currentValue","to_currentValue","current_exchangeRate","output","state","setState","useEffect","fetch","then","response","json","data","prevValue","Object","keys","rates","values","handleChange","e","newVal","target","value","name","prevVal","handleClick","a","className","TextField","id","label","type","InputLabelProps","shrink","onChange","map","item","index","key","Button","variant","color","onClick","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yTA6IeA,MA1If,WAAsB,IAAD,EAEMC,mBAAS,CAC5BC,WAAa,GACbC,WAAY,KACZC,kBAAmB,MACnBC,gBAAiB,MACjBC,qBAAsB,KACtBC,OAAQ,OARK,mBAEZC,EAFY,KAENC,EAFM,KAYjBC,qBAAU,WACNC,MAAM,0CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIN,GAAS,SAAAO,GACnB,OAAO,2BACAA,GADP,IAEId,WAAYe,OAAOC,KAAKH,EAAKI,iBAGvC,IAEFT,qBAAU,WACNC,MAAM,+CAAD,OAAgDH,EAAMJ,kBAAtD,oBAAmFI,EAAMH,kBAC7FO,MAAK,SAAAG,GAAI,OAAIA,EAAKD,UAClBF,MAAK,SAAAE,GAAI,OAAIL,GAAS,SAAAO,GACnB,OAAO,2BACAA,GADP,IAEIV,qBAAsBW,OAAOG,OAAON,EAAKK,OAAO,aAI1D,CAACX,EAAMJ,kBAAkBI,EAAMH,kBAGjC,IAWMgB,EAAe,SAAAC,GACjB,IAAIC,EAASD,EAAEE,OAAOC,MAClBC,EAAOJ,EAAEE,OAAOE,KACpBjB,GAAS,SAAAkB,GACL,MAAU,sBAAPD,EACQ,2BACAC,GADP,IAEIvB,kBAAmBmB,IAEV,oBAAPG,EACC,2BACAC,GADP,IAEItB,gBAAiBkB,SAHlB,MAWTK,EAAW,uCAAG,sBAAAC,EAAA,sDAEbrB,EAAML,YACLM,GAAS,SAAAkB,GACL,OAAO,2BACAA,GADP,IAEIpB,OAAQC,EAAML,WAAaK,EAAMF,0BAN7B,2CAAH,qDAajB,OACI,yBAAKwB,UAAU,aACX,wBAAIA,UAAU,WAAd,iBACA,kBAACC,EAAA,EAAD,CACIC,GAAG,kBACHC,MAAM,iBACNC,KAAK,SACLC,gBAAiB,CACbC,QAAQ,GAEZC,SAtDQ,SAAAf,GAChB,IAAIC,EAASD,EAAEE,OAAOC,MACtBhB,GAAS,SAAAO,GACL,OAAO,2BACAA,GADP,IAEIb,WAAaoB,QAkDbE,MAAOjB,EAAML,aAEjB,yBAAK2B,UAAU,kBACX,yBAAKA,UAAU,cACX,wBAAIA,UAAU,WAAd,QACA,6BACI,4BAAQE,GAAG,YAAYK,SAAUhB,EAAcK,KAAK,qBACnDlB,EAAMN,WAAWoC,KAAI,SAACC,EAAKC,GACxB,OACI,4BAAQC,IAAKD,GAAQD,SAMrC,yBAAKT,UAAU,YACX,wBAAIA,UAAU,SAAd,MACA,6BACI,4BAAQE,GAAG,UAAUK,SAAUhB,EAAcK,KAAK,mBACjDlB,EAAMN,WAAWoC,KAAI,SAACC,EAAKC,GACxB,OACI,4BAAQC,IAAKD,GAAQD,SAMrC,kBAACG,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAASjB,GAAvD,OAIJ,yBAAKE,UAAU,UACX,kCAEJ,yBAAKA,UAAU,UACX,4BAAKtB,EAAMD,SAEf,4BAAQuB,UAAU,UACd,0CACA,8DACA,mEAAwC,4BAAI,iDAC5C,6EAAkD,uBAAGgB,KAAK,qGAAqGtB,OAAO,UAApH,Y,MC1HnDuB,MARf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCIckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ec052eaf.chunk.js","sourcesContent":["import React,{ useState,useEffect } from 'react';\r\nimport { TextField,Button } from  \"@material-ui/core\";\r\n\r\nfunction Converter() {\r\n    \r\n    let [state,setState] = useState({\r\n        currencies : [],\r\n        inputValue: null,\r\n        from_currentValue: 'CAD',\r\n        to_currentValue: 'CAD',\r\n        current_exchangeRate: null,\r\n        output: null\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.exchangeratesapi.io/latest\")\r\n        .then(response => response.json())\r\n        .then(data => setState(prevValue => {\r\n            return {\r\n                ...prevValue,\r\n                currencies: Object.keys(data.rates)\r\n            }\r\n        }))\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        fetch(`https://api.exchangeratesapi.io/latest?base=${state.from_currentValue}&symbols=${state.to_currentValue}`)\r\n        .then(data => data.json())\r\n        .then(json => setState(prevValue => {\r\n            return {\r\n                ...prevValue,\r\n                current_exchangeRate: Object.values(json.rates)[0]\r\n            }\r\n    }))\r\n            \r\n    },[state.from_currentValue,state.to_currentValue])\r\n\r\n    //HandleInput for the input value\r\n    const handleInput = e => {\r\n        let newVal = e.target.value;\r\n        setState(prevValue => {\r\n            return {\r\n                ...prevValue,\r\n                inputValue : newVal\r\n            }\r\n        })\r\n    }\r\n\r\n    //HandleChange function to select value in dropdown\r\n    const handleChange = e => {\r\n        let newVal = e.target.value;\r\n        let name = e.target.name;\r\n        setState(prevVal => {\r\n            if(name===\"from_currentValue\"){\r\n                return {\r\n                    ...prevVal,\r\n                    from_currentValue: newVal\r\n                }\r\n            } else if(name===\"to_currentValue\"){\r\n                return {\r\n                    ...prevVal,\r\n                    to_currentValue: newVal\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    //HandleClick function to fetch the latest data for the selected value in the dropdown\r\n    //Its an async function since it has to depend on the updation of value \r\n    const handleClick = async () => {\r\n        \r\n        if(state.inputValue){\r\n            setState(prevVal => {\r\n                return {\r\n                    ...prevVal,\r\n                    output: state.inputValue * state.current_exchangeRate\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"heading\">Converter App</h1>\r\n            <TextField\r\n                id=\"standard-number\"\r\n                label=\"Enter Currency\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }} \r\n                onChange={handleInput} \r\n                value={state.inputValue}\r\n                />\r\n            <div className=\"currency-block\">\r\n                <div className=\"from-block\">\r\n                    <h2 className=\"from-h2\">From</h2>\r\n                    <div>\r\n                        <select id=\"from-menu\" onChange={handleChange} name=\"from_currentValue\">\r\n                        {state.currencies.map((item,index) => {\r\n                            return (\r\n                                <option key={index}>{item}</option>\r\n                            )\r\n                        })}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"to-block\">\r\n                    <h2 className=\"to-h2\">To</h2>\r\n                    <div>\r\n                        <select id=\"to-menu\" onChange={handleChange} name=\"to_currentValue\">\r\n                        {state.currencies.map((item,index) => {\r\n                            return (\r\n                                <option key={index}>{item}</option>\r\n                            )\r\n                        })}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={handleClick}>\r\n                    Go\r\n                </Button>\r\n            </div>\r\n            <div className=\"equals\">\r\n                <h1>=</h1>\r\n            </div>\r\n            <div className=\"output\">\r\n                <h1>{state.output}</h1>\r\n            </div>\r\n            <footer className='footer'>\r\n                <p>How to use?</p>\r\n                <p>1. Enter a value into the field</p>\r\n                <p>2. Select the conversion values both <em><strong>from and to</strong></em></p>\r\n                <p>For all the currencies and abbrevations, refer <a href=\"https://www.easymarkets.com/int/learn-centre/discover-trading/currency-acronyms-and-abbreviations/\" target=\"_blank\">here</a></p>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Converter\r\n","import React from 'react';\nimport Converter from \"./Components/Converter\";\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}